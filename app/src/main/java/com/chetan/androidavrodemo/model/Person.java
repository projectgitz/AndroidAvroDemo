/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.chetan.androidavrodemo.model;  
@SuppressWarnings("all")
/** A Person is someone who can login to the system. */
@org.apache.avro.specific.AvroGenerated
public class Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"com.chetan.androidavrodemo.model\",\"doc\":\"A Person is someone who can login to the system.\",\"fields\":[{\"name\":\"username\",\"type\":\"string\",\"doc\":\"The username that uniquely identifies the user\"},{\"name\":\"password\",\"type\":\"string\",\"doc\":\"A password, hopefully encrypted\"},{\"name\":\"joined_on\",\"type\":\"long\",\"doc\":\"The offset from the UTC epoch when the user joined in on the fun\"},{\"name\":\"email\",\"type\":[\"string\",\"null\"],\"doc\":\"The email address.  Since this is a new field, it must be nullable or have a non-null default set.\",\"default\":\"null\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The username that uniquely identifies the user */
  @Deprecated public CharSequence username;
  /** A password, hopefully encrypted */
  @Deprecated public CharSequence password;
  /** The offset from the UTC epoch when the user joined in on the fun */
  @Deprecated public long joined_on;
  /** The email address.  Since this is a new field, it must be nullable or have a non-null default set. */
  @Deprecated public CharSequence email;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Person() {}

  /**
   * All-args constructor.
   */
  public Person(CharSequence username, CharSequence password, Long joined_on, CharSequence email) {
    this.username = username;
    this.password = password;
    this.joined_on = joined_on;
    this.email = email;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return username;
    case 1: return password;
    case 2: return joined_on;
    case 3: return email;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: username = (CharSequence)value$; break;
    case 1: password = (CharSequence)value$; break;
    case 2: joined_on = (Long)value$; break;
    case 3: email = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'username' field.
   * The username that uniquely identifies the user   */
  public CharSequence getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * The username that uniquely identifies the user   * @param value the value to set.
   */
  public void setUsername(CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'password' field.
   * A password, hopefully encrypted   */
  public CharSequence getPassword() {
    return password;
  }

  /**
   * Sets the value of the 'password' field.
   * A password, hopefully encrypted   * @param value the value to set.
   */
  public void setPassword(CharSequence value) {
    this.password = value;
  }

  /**
   * Gets the value of the 'joined_on' field.
   * The offset from the UTC epoch when the user joined in on the fun   */
  public Long getJoinedOn() {
    return joined_on;
  }

  /**
   * Sets the value of the 'joined_on' field.
   * The offset from the UTC epoch when the user joined in on the fun   * @param value the value to set.
   */
  public void setJoinedOn(Long value) {
    this.joined_on = value;
  }

  /**
   * Gets the value of the 'email' field.
   * The email address.  Since this is a new field, it must be nullable or have a non-null default set.   */
  public CharSequence getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * The email address.  Since this is a new field, it must be nullable or have a non-null default set.   * @param value the value to set.
   */
  public void setEmail(CharSequence value) {
    this.email = value;
  }

  /** Creates a new Person RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Person instance */
  public static Builder newBuilder(Person other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for Person instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Person>
    implements org.apache.avro.data.RecordBuilder<Person> {

    private CharSequence username;
    private CharSequence password;
    private long joined_on;
    private CharSequence email;

    /** Creates a new Builder */
    public Builder() {
      super(Person.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    public Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.password)) {
        this.password = data().deepCopy(fields()[1].schema(), other.password);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.joined_on)) {
        this.joined_on = data().deepCopy(fields()[2].schema(), other.joined_on);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Person instance */
    private Builder(Person other) {
            super(Person.SCHEMA$);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.password)) {
        this.password = data().deepCopy(fields()[1].schema(), other.password);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.joined_on)) {
        this.joined_on = data().deepCopy(fields()[2].schema(), other.joined_on);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'username' field */
    public CharSequence getUsername() {
      return username;
    }
    
    /** Sets the value of the 'username' field */
    public Builder setUsername(CharSequence value) {
      validate(fields()[0], value);
      this.username = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'username' field has been set */
    public boolean hasUsername() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'username' field */
    public Builder clearUsername() {
      username = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'password' field */
    public CharSequence getPassword() {
      return password;
    }
    
    /** Sets the value of the 'password' field */
    public Builder setPassword(CharSequence value) {
      validate(fields()[1], value);
      this.password = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'password' field has been set */
    public boolean hasPassword() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'password' field */
    public Builder clearPassword() {
      password = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'joined_on' field */
    public Long getJoinedOn() {
      return joined_on;
    }
    
    /** Sets the value of the 'joined_on' field */
    public Builder setJoinedOn(long value) {
      validate(fields()[2], value);
      this.joined_on = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'joined_on' field has been set */
    public boolean hasJoinedOn() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'joined_on' field */
    public Builder clearJoinedOn() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'email' field */
    public CharSequence getEmail() {
      return email;
    }
    
    /** Sets the value of the 'email' field */
    public Builder setEmail(CharSequence value) {
      validate(fields()[3], value);
      this.email = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'email' field has been set */
    public boolean hasEmail() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'email' field */
    public Builder clearEmail() {
      email = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Person build() {
      try {
        Person record = new Person();
        record.username = fieldSetFlags()[0] ? this.username : (CharSequence) defaultValue(fields()[0]);
        record.password = fieldSetFlags()[1] ? this.password : (CharSequence) defaultValue(fields()[1]);
        record.joined_on = fieldSetFlags()[2] ? this.joined_on : (Long) defaultValue(fields()[2]);
        record.email = fieldSetFlags()[3] ? this.email : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
